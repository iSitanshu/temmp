// Online C++ compiler to run C++ program online
#include <iostream>
#include <queue>
#include <climits>
using namespace std;
class Node{
    public:
        int data;
        Node* left;
        Node* right;
    Node(int d){
        this->data=d;
        this->left=NULL;
        this->right=NULL;
    }
    ~Node() {
        // Destructor logic, you can add more cleanup if needed
        delete left;
        delete right;
    }
};
int minval(Node* root){
    Node* temp=root;
    while(temp->left!=NULL)
    temp=temp->left;
    return temp->data;
}
int maxval(Node* root){
    Node* temp=root;
    while(temp->right!=NULL)
    temp=temp->right;
    return temp->data;
}
Node* createNode(Node* root,int data){
    if(root==NULL){
    root=new Node(data);
    return root;}
    if(root->data>data)
    root->left=createNode(root->left,data);
    else
    root->right=createNode(root->right,data);
    return root;
}
void takeinput(Node* &root){
    int data;
    cin>>data;
    while(data!=-1){
        root=createNode(root,data);
        cin>>data;
    }
}
void traverse(Node* root){
    if(root==NULL)
    return;
    
    queue <Node*> q; 
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        Node* temp=q.front();
        q.pop();
        if(temp==NULL){
            cout<<endl;
            if(!q.empty())
            q.push(NULL);
        }
        else{
            cout<<temp->data<<" ";
            if(temp->left)
            q.push(temp->left);
            if(temp->right)
            q.push(temp->right);
        }
    }
}
Node* searching(Node* root,int data){
    if(root==NULL)
    return NULL;
    if(root->data==data)
    return root;
    if(root->data>data)
    return searching(root->left,data);
    if(root->data<data)
    return searching(root->right,data);
    // return root;
}
Node* deleteNodeBST(Node* root,int data){
    if(root->data==data){
        if(root==NULL)
        return NULL;
        if(root->left==NULL&&root->right==NULL){
        delete root;
        return NULL;}
        if(root->left!=NULL&&root->right==NULL){
            Node* child=root->left;
            delete root;
            return child;
        }
        if(root->left==NULL&&root->right!=NULL){
            Node* child=root->right;
            delete root;
            return child;
        }
        if(root->left!=NULL&&root->right!=NULL){
            int max=maxval(root->left);
            cout<<"maxval of left subtree"<<max<<endl;
            root->data=max;
            root->left=deleteNodeBST(root->left,max);
            return root;
        }
    }
    else if(root->data>data)
    root->left=deleteNodeBST(root->left,data);
    else
    root->right=deleteNodeBST(root->right,data);
    return root;
}
bool solve(Node* root,int min,int max){
    if(root==NULL)
    return true;
    if(root->data<max&&root->data>min)
    return true;
    bool leftans=solve(root->left,min,root->data);
    bool rightans=solve(root->right,root->data,max);
    return leftans&rightans;
}
bool validBST(Node* root){
    int min=INT_MIN;
    int max=INT_MAX;
    return (solve(root,min,max));
}
Node* LCT(Node* root,int n1,int n2){
    if(root==NULL)
    return root;
    Node* L=searching(root,n1);
    Node* R=searching(root,n2);
    if(root->data==n1||root->data==n2)
    return root;
    if(root->data>n1&&root->data>n2)
    return LCT(root->left,n1,n2);
    else if(root->data<n1&&root->data<n2)
    return LCT(root->right,n1,n2);
    
    return root;
}
int kthelement(Node* root,int k){
    if(root==NULL)
    return -1;
    
    int leftans=kthelement(root->left,k);
    if(leftans!=-1)
    return leftans;
    
    k--;
    if(k==0)
    return root->data;
    
    int rightans=kthelement(root->right,k);
    return rightans;
}
Node* InorderseTree(Node* root,vector <int> arr,int start,int end){
    if(start>end)
    return NULL;
    
        int mid=(start+end)/2;
        int element=arr[mid];
        
        root=new Node(element);
        
        root->left=InorderseTree(root->left,arr,start,mid-1);
        root->right=InorderseTree(root->right,arr,mid+1,end);
        
        return root;
}
int main() {
    Node* root=NULL;
    takeinput(root);
    traverse(root);
    Node* temp=searching(root,40);
    cout<<"Position of the searching variable "<<temp->data<<endl;
    cout<<"Maximum value of BST "<<maxval(root)<<endl;
    cout<<"Minimum value of BST "<<minval(root)<<endl;
    //Deletion
    Node* del=deleteNodeBST(root,100);
    traverse(root);
    //valid BST
    if(validBST(root))
    cout<<"Valid hai bro"<<endl;
    else
    cout<<"Valid nhi hai vro"<<endl;
    //LCA Lowest Common Tree
    Node *LC=LCT(root,120,170);
    cout<<"Lowest Comman Tree "<<LC->data<<endl;
    traverse(root);
    // cout<<"Kth Smallest Element "<<kthelement(root,5)<<endl;
    //check this code
    cout<<"Inorder se Tree aaiyeeh"<<endl;
    Node* root2=NULL;
    vector<int> arr{50,60,70,100,120,150,170};
    root2=InorderseTree(root2,arr,0,arr.size()-1);
    traverse(root2);
    
    return 0;
}